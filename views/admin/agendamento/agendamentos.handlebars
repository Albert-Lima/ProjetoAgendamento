<!--Esta é a página que será carregada ao clicar no botão de estabelecimentos-->
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Estabelecimentos</title>
</head>
<body>
    <aside class="ContainerMenuLeft">
        <div class="ContainerLogoPanel">
            LOGO AQUI
        </div>
        {{>menuAgendamentos}}
    </aside>
    <main class="panel">
        <header class="HeaderPanel">
            <div>
                <a class="doboutButton"><img src="/images/icons8-dúvida-100.png" alt="manual da aplicação"></a>
            </div>
            <div class="infoUsuario">
                <span>nome de usuário</span>
                <span class="userPicture"><!--<img src="/images/icons8-adicionar-usuário-masculino-90.webp" alt="imagem do usuário">--></span>
            </div>
        </header>
        <section class="ConteinerInfo">
            <section class="viewPanel">
                <header class="headerAgendamentos">
                    <div class="selectPeriodBox">
                        <button id="buttonAll" class="selectPeriodBox_selected">Todos</button>
                        <button id="buttonWeek" class="selectPeriodBox_no_selected">Semanal</button>
                    </div>
                    <div class="containerBttAddAgendamento">
                        <button class="buttonAddAgendamento" type="button" id="openFormAgendamento">
                            <img src="/images/icons8-adicionar-100.webp" alt="adicionar agendamento">
                        </button>
                    </div>
                    <div class="containerSearch">
                        <button class="buttonInputSearch" type="button" >
                            <img src="/images/icons8-pesquisar-50.png" alt="pesquise">
                        </button>
                        <input type="search" autocomplete="on" class="inputContainerSearch">
                    </div>
                </header>
                <section class="containerAgendamentos">
                    {{#each agendamentos}}
                        <section class="boxAgendamento">
                            <div>
                                <h2>Cliente</h2>
                                <span>{{nameClient}}</span>
                                <span>{{phoneClient}}</span>
                            </div>
                            <div>
                                <h2>Serviço</h2>
                                <span>{{service.name}}</span>
                                <span>{{service.value}}</span>
                            </div>
                            <div>
                                <h2>Profissional</h2>
                                <span>{{profissional.name}}</span>
                                <span>{{profissional.phone}}</span>
                            </div>
                        </section>
                    {{else}}
                    {{/each}}
                </section>
            </section>
        </section>
        <section class="poupUpForm" id="containerFormAgendamento">
            <section class="containerForm">
                <header>
                    <p class="titleForm">Novo Agendamento</p>
                    <button type="button" class="buttonClosePoupUp" id="closeFormAgendamento"><img src="/images/icons8-excluir-50.png" alt="fechar formulário"></button>
                </header>
                <form action="/addagendamento" method="post" class="formMain">
                    <section class="partForm">
                        <h2>cliente</h2>
                        <input type="text" name="nameClient" class="inputName" placeholder="nome">
                        <input type="number" name="phoneClient" class="inputName" placeholder="whatsapp">
                    </section>
                    <section class="partForm">
                        <section class="selectBox">
                            <div class="selectBoxHeader">Serviços</div>
                            <section class="containerOptions">
                                {{#each services}}
                                    <label class="LabelCheckBoxAddOptions">
                                        <input type="checkbox" class="serviceCheckbox" name="service" value="{{_id}}">
                                        {{name}}
                                    </label>
                                {{else}}
                                    <a href="/servicos">Cadastre Serviços</a>
                                {{/each}}
                            </section>
                        </section>
                    </section>
                    <section class="partForm">
                        <section class="selectBox">
                            <div class="selectBoxHeader">Profissionais</div>
                            <section class="containerOptions">
                                {{#each profissionais}}
                                    <label class="LabelCheckBoxAddOptions profissionalLabels" data-services="{{#each services}}{{_id}},{{/each}}">
                                        <input type="checkbox" name="profissional" value="{{_id}}">
                                        {{name}}
                                    </label>
                                {{else}}
                                    <a href="/servicos">Cadastre Profissionais</a>
                                {{/each}}
                            </section>
                        </section>
                    </section>
                    <button type="submit" class="buttonSaveSubmit">salvar</button>
                </form>
            </section>
        </section>
    </main>
    <script>
        const inputContainerSearch = document.querySelector(".inputContainerSearch")
        const buttonInputSearch = document.querySelector(".buttonInputSearch")

        function openSearch(){
            inputContainerSearch.style.transition = "1s"
            inputContainerSearch.style.width = "200px"

            buttonInputSearch.removeEventListener("click", openSearch)
            buttonInputSearch.addEventListener("click", closeSeach)
            function closeSeach(){
                inputContainerSearch.style.width = "0px"

                buttonInputSearch.addEventListener("click", openSearch)
                buttonInputSearch.removeEventListener("click", closeSeach)
            }
        }
        buttonInputSearch.addEventListener("click", openSearch)

        var openFormAgendamento = document.querySelector("#openFormAgendamento")
        var closeFormAgendamento = document.querySelector("#closeFormAgendamento")
        var containerFormAgendamento = document.querySelector("#containerFormAgendamento")

        function openForm(){
            containerFormAgendamento.style.display = "flex"
        }
        openFormAgendamento.addEventListener("click", openForm)

        function closeForm(){
            containerFormAgendamento.style.display = "none"
        }
        closeFormAgendamento.addEventListener("click", closeForm)


        //checkboxes
        document.addEventListener('DOMContentLoaded', function () {
            // Seleciona todos os `selectBox` na página
            const selectBoxes = document.querySelectorAll('.selectBox');

            // Itera sobre cada `selectBox`
            selectBoxes.forEach(selectBox => {
                const containerOptions = selectBox.querySelector('.containerOptions');
                const labels = containerOptions.querySelectorAll('.LabelCheckBoxAddOptions');

                labels.forEach(label => {
                    label.addEventListener('click', function () {
                        const checkbox = this.querySelector('input[type="checkbox"]');
                        if (!checkbox) return;

                        // Desmarca todos os checkboxes dentro do container atual
                        const allCheckboxes = containerOptions.querySelectorAll('input[type="checkbox"]');
                        allCheckboxes.forEach(cb => {
                            cb.checked = false;
                            cb.closest('.LabelCheckBoxAddOptions').classList.remove('active');
                        });

                        // Marca o checkbox associado à label clicada
                        checkbox.checked = true;
                        this.classList.add('active'); // Adiciona a classe 'active' somente ao clicado
                    });
                });
            });



            const serviceCheckboxes = document.querySelectorAll('.serviceCheckbox');
            const profissionalLabels = document.querySelectorAll('.profissionalLabels');

            // Função para obter os serviços selecionados
            function getSelectedServices() {
                const selectedServices = [];
                serviceCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        selectedServices.push(checkbox.value);  // Armazena o ID dos serviços selecionados
                    }
                });
                return selectedServices;
            }

            // Função para filtrar profissionais com base nos serviços selecionados
            function filterProfessionals() {
                const selectedServices = getSelectedServices();  // Obtém os serviços selecionados

                profissionalLabels.forEach(label => {
                    const dataServices = label.getAttribute('data-services');
                    if (!dataServices) {
                        // Se o atributo data-services não existe, ignore este profissional
                        label.style.display = 'none';
                        return;
                    }

                    // Converte os IDs dos serviços do profissional em um array
                    const profissionalServices = dataServices.split(',').map(id => id.trim());  

                    // Verifica se o profissional oferece algum dos serviços selecionados
                    const isVisible = selectedServices.length === 0 || profissionalServices.some(service => selectedServices.includes(service));

                    if (isVisible) {
                        label.style.display = 'block';  // Exibe o profissional
                    } else {
                        label.style.display = 'none';   // Esconde o profissional
                    }
                });
            }

            // Adiciona evento para filtrar os profissionais sempre que um serviço for alterado
            serviceCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', filterProfessionals);  // Filtro ativado quando um serviço é marcado/desmarcado
            });

            // Inicializa a filtragem quando a página carrega
            filterProfessionals()  // Inicializa a filtragem no carregamento
        });
 
    </script>
</body>
</html>