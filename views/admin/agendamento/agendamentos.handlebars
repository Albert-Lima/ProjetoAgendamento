<!--Esta é a página que será carregada ao clicar no botão de estabelecimentos-->
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/agendamentos.css">
    <style>
        .selected-label {
            background-color: #28a745;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
        }
        .calendar-container {
            text-align: center;
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 400px;
        }
        .navigation {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .navigation button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
        }
        .navigation button:hover {
            background: #0056b3;
        }
        #calendar {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }
        .day, .day-header {
            padding: 10px;
            text-align: center;
            font-size: 14px;
        }
        .day-header {
            font-weight: bold;
            background: #007bff;
            color: white;
            border-radius: 5px;
        }
        .day {
            background: #eaeaea;
            border-radius: 5px;
            cursor: pointer;
        }
        .day.disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .day:hover:not(.disabled) {
            background: #007bff;
            color: #fff;
        }
        .day.selected {
            background: #28a745;
            color: #fff;
        }
        .containerHour{
            height: 30px;
            width: 40px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        .containerHour div{
            font-size: 10pt;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-weight: 400;
            color: black;
        }

        /*calendáio para ver agendamentos---------------------------*/
        #calendarSelet {
            max-width: 300px;
            text-align: center;
            margin: 20px auto;
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 20px;
            background-color: #f9f9f9;
        }

        #calendar-header-selet {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        #days-of-week-selet {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            font-weight: bold;
            margin: 10px 0;
        }

        #calendar-days-selet {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }

        .daySelet {
            width: 40px;
            height: 40px;
            line-height: 40px;
            text-align: center;
            cursor: pointer;
            border-radius: 5px;
            background-color: #f1f1f1;
            transition: background-color 0.3s;
        }

        .daySelet:hover {
            background-color: #ddd;
        }

        .daySelet.active {
            background-color: #4285f4;
            color: white;
        }

    </style>
    <title>Estabelecimentos</title>
</head>
<body>
    <aside class="ContainerMenuLeft">
        <div class="ContainerLogoPanel">
            LOGO AQUI
        </div>
        {{>menuAgendamentos}}
    </aside>
    <main class="panel">
        <header class="HeaderPanel">
            <div>
                <button class="doboutButton">
                    <p>Ajuda</p>
                    <img src="/images/icons8-ajuda-32.png" alt="manual da aplicação">
                </button>
            </div>
            <div class="infoUsuario">
                {{#if user}}
                    <span>{{user.name}}</span>
                {{else}}
                {{/if}}
            </div>
        </header>

        <section class="ConteinerInfo">
            <!--Container de todas as informções -->
            <section class="viewPanel">
               <aside>
                    <div id="calendarSelet">
                        <div id="calendar-header-selet">
                            <button id="prev-month-selet">←</button>
                            <h2 id="month-name-selet"></h2>
                            <button id="next-month-selet">→</button>
                        </div>
                        <div id="days-of-week-selet">
                            <span>Dom</span><span>Seg</span><span>Ter</span><span>Qua</span><span>Qui</span><span>Sex</span><span>Sáb</span>
                        </div>
                        <div id="calendar-days-selet"></div>
                    </div>
               </aside>
            </section>
        </section>


        <!--Formulário para fazer um novo agendamento-->
        <section class="poupUpForm" id="containerFormAgendamento">
            <section class="containerForm">
                <header>
                    <p class="titleForm">Novo Agendamento</p>
                    <button type="button" class="buttonClosePoupUp" id="closeFormAgendamento"><img src="/images/icons8-excluir-50.png" alt="fechar formulário"></button>
                </header>
                <form action="" method="post" class="formMain">
                    <section class="partForm">
                        <h2>cliente</h2>
                        <input type="text" name="nameClient" class="inputName" placeholder="nome">
                        <input type="number" name="phoneClient" class="inputName" placeholder="whatsapp">
                    </section>
                    <section class="partForm">
                        <section class="selectBox">
                            <div class="selectBoxHeader">Serviços</div>
                            <section class="containerOptions">
                                {{#each services}}
                                    <label class="LabelCheckBoxAddOptions">
                                        <input type="checkbox" class="serviceCheckbox" name="service" value="{{_id}}">
                                        {{name}}
                                    </label>
                                {{else}}
                                    <a href="/servicos">Cadastre Serviços</a>
                                {{/each}}
                            </section>
                        </section>
                    </section>
                    <section class="partForm">
                        <section class="selectBox">
                            <div class="selectBoxHeader">Profissionais</div>
                            <section class="containerOptions">
                                {{#each profissionais}}
                                    <label class="LabelCheckBoxAddOptions profissionalLabels" data-services="{{#each services}}{{_id}},{{/each}}">
                                        <input type="checkbox" name="profissional" value="{{_id}}">
                                        {{name}}
                                    </label>
                                {{else}}
                                    <a href="/servicos">Cadastre Profissionais</a>
                                {{/each}}
                            </section>
                        </section>
                    </section>
                    <section class="partForm">
                        <div class="calendar-container">
                            <h1 id="current-month">Mês Atual</h1>
                            <div class="navigation">
                                <button id="prev-month" type="button">&lt; Mês Anterior</button>
                                <button id="next-month" type="button">Próximo Mês &gt;</button>
                            </div>
                            <div id="calendar"></div>
                            <p id="selected-date"></p>
                        </div>
                    </section>
                    <section class="partForm">
                        <div id="data-container">

                        </div>
                        <div id="horarios-container">

                        </div>
                    </section>

                    <section class="partFormButtons">
                        <button type="submit" class="buttonSaveSubmit">confirmar e salvar</button>
                        <button type="submit" class="buttonSaveAgendamentoByWhatsapp">
                            enviar pedido de confirmação 
                            <img src="/images/icons8-whatsapp-48.png" alt="enviar pedido de confirmação pelo whatsapp">
                        </button>
                    </section>

                </form>
                <!--SCRIPT PARA ENVIAR OS DADOS DO FORM EM ROTAS DIFERENTES-->
                <script>
                    const form = document.querySelector(".formMain");
                    const buttonSaveSubmit = document.querySelector(".buttonSaveSubmit");
                    const buttonSaveByWhatsapp = document.querySelector(".buttonSaveAgendamentoByWhatsapp");

                    buttonSaveSubmit.addEventListener("click", () => {
                        form.action = "/addagendamentodirect";
                    });
                    buttonSaveByWhatsapp.addEventListener("click", () => {
                        form.action = "/addagendamentobywhatsapp";
                    });
                </script>
            </section>
        </section>
    </main>
    <!--Calendário para ver agendamentos-->
    <script>
        // script.js
        const calendarDays = document.getElementById('calendar-days-selet');
        const monthName = document.getElementById('month-name-selet');
        const selectedDateSpan = document.getElementById('selected-date-selet');
        const appointmentsList = document.getElementById('appointmentsSelet');

        let currentMonth = new Date().getMonth();
        let currentYear = new Date().getFullYear();

        const appointments = {
            '2025-01-05': ['Corte de cabelo - 10h', 'Reunião - 14h'],
            '2025-01-07': ['Dentista - 9h', 'Treinamento - 16h'],
        };

        function renderCalendar() {
            const firstDay = new Date(currentYear, currentMonth, 1);
            const lastDay = new Date(currentYear, currentMonth + 1, 0);
            const daysInMonth = lastDay.getDate();

            calendarDays.innerHTML = '';
            monthName.textContent = firstDay.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });

            for (let i = 1; i <= daysInMonth; i++) {
                const day = document.createElement('div');
                day.classList.add('daySelet');
                day.textContent = i;
                const date = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
                day.dataset.date = date;

                day.addEventListener('click', () => {
                    document.querySelectorAll('.daySelet').forEach(el => el.classList.remove('active'));
                    day.classList.add('active');
                    loadAppointments(date);
                });

                calendarDays.appendChild(day);
            }
        }

        function loadAppointments(date) {
            selectedDateSpan.textContent = date;
            const dailyAppointments = appointments[date] || [];
            appointmentsList.innerHTML = '';

            if (dailyAppointments.length === 0) {
                appointmentsList.innerHTML = '<li>Sem agendamentos</li>';
                return;
            }

            dailyAppointments.forEach(appointment => {
                const li = document.createElement('li');
                li.textContent = appointment;
                appointmentsList.appendChild(li);
            });
        }

        document.getElementById('prev-month-selet').addEventListener('click', () => {
            currentMonth -= 1;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear -= 1;
            }
            renderCalendar();
        });

        document.getElementById('next-month-selet').addEventListener('click', () => {
            currentMonth += 1;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear += 1;
            }
            renderCalendar();
        });

        // Render inicial
        renderCalendar();
    </script>
    <!--Script para o funcionamento do calendário de adicionar agendamento-->
    <script>
        const calendarElement = document.getElementById("calendar");
        const selectedDateElement = document.getElementById("selected-date");
        const prevMonthButton = document.getElementById("prev-month");
        const nextMonthButton = document.getElementById("next-month");
        const currentMonthElement = document.getElementById("current-month");

        // Variáveis para acompanhar o mês e ano exibidos
        let currentDate = new Date();

        // Nomes dos meses e dias da semana
        const monthNames = [
        "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
        "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
        ];
        const dayNames = ["dom", "seg", "ter", "qua", "qui", "sex", "sab"];

        // Função para criar o cabeçalho com os dias da semana
        const createDayHeaders = () => {
        dayNames.forEach(day => {
            const dayHeader = document.createElement("div");
            dayHeader.classList.add("day-header");
            dayHeader.textContent = day;
            calendarElement.appendChild(dayHeader);
        });
        };

        // Função para criar o calendário
        const createCalendar = () => {
        calendarElement.innerHTML = ""; // Limpar calendário existente

        // Atualizar o título com o mês e ano
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();
        currentMonthElement.textContent = `${monthNames[month]} ${year}`;

        createDayHeaders();

        const firstDayOfMonth = new Date(year, month, 1).getDay(); // Dia da semana do 1º dia do mês
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const today = new Date();

        // Adicionar células vazias para os dias antes do início do mês
        for (let i = 0; i < firstDayOfMonth; i++) {
            const emptyCell = document.createElement("div");
            emptyCell.classList.add("day");
            emptyCell.style.visibility = "hidden";
            calendarElement.appendChild(emptyCell);
        }

        // Adicionar os dias do mês
        for (let day = 1; day <= daysInMonth; day++) {
            const date = new Date(year, month, day);
            const dayElement = document.createElement("div");
            dayElement.classList.add("day");
            dayElement.textContent = day;

            // Desabilitar dias anteriores ao dia atual no mês atual
            if (year === today.getFullYear() && month === today.getMonth() && day < today.getDate()) {
                dayElement.classList.add("disabled");
            } else {
                dayElement.addEventListener("click", () => selectDate(date, dayElement));
            }

            calendarElement.appendChild(dayElement);
        }
        };

        // Função para selecionar a data
        const selectDate = (date, dayElement) => {
        const previouslySelected = document.querySelector(".day.selected");
            if (previouslySelected) {
                previouslySelected.classList.remove("selected");
            }

            dayElement.classList.add("selected");

            const formattedDate = `${date.getDate().toString().padStart(2, "0")}/${(date.getMonth() + 1).toString().padStart(2, "0")}`;
            const dayOfWeek = dayNames[date.getDay()];

            selectedDateElement.textContent = `Data selecionada: ${formattedDate}, ${dayOfWeek}`;

            const dataContainer = document.getElementById('data-container')
            dataContainer.innerHTML = ""
            dataContainer.innerHTML = "<input type='hidden' name='data' value="+formattedDate+">"

            var infoDay = {
                diaMes: formattedDate,
                diaSemana: dayOfWeek
            }

            // Enviar dados para o servidor
            const API_URL = window.location.hostname === "localhost"
                ? "http://localhost:8081" // Substitua pela URL local da API
                : "https://projetoagendamento-67dz.onrender.com";

            fetch(`${API_URL}/agendamentos/verifyDays`, {
                method: 'POST', 
                headers: {
                    'Content-Type': 'application/json' 
                },
                body: JSON.stringify(infoDay) 
            })
                .then(response => {
                    if (!response.ok) {
                        console.log(response.json())
                        throw new Error(`Erro na requisição: ${response.statusText}`);
                    }
                    return response.json(); // Converte a resposta em JSON
                })
                .then(data => {
                    console.log('Resposta do servidor:', data); // Exibe a resposta completa do servidor

                    // Verifica se a resposta contém horários disponíveis
                    if (data.status === 'sucesso' && data.horariosDisponiveis) {
                        renderAvailableTimes(data.horariosDisponiveis); // Passa os horários disponíveis para exibir no front-end
                    } else {
                        renderAvailableTimes(data.horariosDisponiveis)
                    }
                })
                .catch(error => {
                    console.error('Erro ao enviar os dados para o servidor:', error);
                });
        };
        const enableSingleSelection = () => {
            const horariosContainer = document.getElementById('horarios-container');
            
            horariosContainer.addEventListener('change', (event) => {
                if (event.target.type === 'checkbox' && event.target.name === 'horario') {
                    // Desmarcar todos os outros checkboxes e remover a classe verde das labels
                    const checkboxes = horariosContainer.querySelectorAll("input[type='checkbox'][name='horario']");
                    checkboxes.forEach(checkbox => {
                        const label = checkbox.closest('label');
                        if (label) {
                            label.classList.remove('selected-label');
                        }
                        if (checkbox !== event.target) {
                            checkbox.checked = false;
                        }
                    });

                    // Adicionar classe verde à label do checkbox selecionado
                    if (event.target.checked) {
                        const selectedLabel = event.target.closest('label');
                        if (selectedLabel) {
                            selectedLabel.classList.add('selected-label');
                        }
                    }
                }
            });
        };

        // rederizar os horários
        const renderAvailableTimes = (horarios) => {
            const horariosContainer = document.getElementById('horarios-container');
            
            horariosContainer.innerHTML = '';
            if (horarios[0] === "o estabelecimento está fechado nesse dia!"){ //o valor deve ser exatamente a mensagem passada na api
                horariosContainer.innerHTML = "<h3>"+horarios[0]+"</h3>";
            } else if (horarios.length > 0) {
                horariosContainer.innerHTML = `<h3>Horários disponíveis:</h3>`;
                const list = document.createElement('ul');
                horarios.forEach(horario => {
                    const listItem = document.createElement('div');
                    listItem.classList.toggle('containerHour')
                    listItem.innerHTML = "<label class='LabelCheckBoxAddOptions'><input type='checkbox' name='horario' value="+horario+">"+horario+"h</label>"
                    list.appendChild(listItem);

                });
                horariosContainer.appendChild(list);


                enableSingleSelection()
            } else {
                horariosContainer.innerHTML = `<p>Não há horários disponíveis para esta data.</p>`;
            }
        };

        // Função para alterar o mês
        const changeMonth = (direction) => {
            currentDate.setMonth(currentDate.getMonth() + direction);
            createCalendar();
        };

        // Adicionar eventos aos botões de navegação
        prevMonthButton.addEventListener("click", () => {
            const today = new Date();
            if (
                currentDate.getFullYear() > today.getFullYear() ||
                (currentDate.getFullYear() === today.getFullYear() && currentDate.getMonth() > today.getMonth())
            ) {
                changeMonth(-1);
            }
        });

        nextMonthButton.addEventListener("click", () => {
            changeMonth(1);
        });

        // Inicializar o calendário
        createCalendar();

    </script>
    <script>

        var openFormAgendamento = document.querySelector("#openFormAgendamento")
        var closeFormAgendamento = document.querySelector("#closeFormAgendamento")
        var containerFormAgendamento = document.querySelector("#containerFormAgendamento")

        function openForm(){
            containerFormAgendamento.style.display = "flex"
        }
        openFormAgendamento.addEventListener("click", openForm)

        function closeForm(){
            containerFormAgendamento.style.display = "none"
        }
        closeFormAgendamento.addEventListener("click", closeForm)


        //checkboxes
        document.addEventListener('DOMContentLoaded', function () {
            // Seleciona todos os `selectBox` na página
            const selectBoxes = document.querySelectorAll('.selectBox');

            // Itera sobre cada `selectBox`
            selectBoxes.forEach(selectBox => {
                const containerOptions = selectBox.querySelector('.containerOptions');
                const labels = containerOptions.querySelectorAll('.LabelCheckBoxAddOptions');

                labels.forEach(label => {
                    label.addEventListener('click', function () {
                        const checkbox = this.querySelector('input[type="checkbox"]');
                        if (!checkbox) return;

                        // Desmarca todos os checkboxes dentro do container atual
                        const allCheckboxes = containerOptions.querySelectorAll('input[type="checkbox"]');
                        allCheckboxes.forEach(cb => {
                            cb.checked = false;
                            cb.closest('.LabelCheckBoxAddOptions').classList.remove('active');
                        });

                        // Marca o checkbox associado à label clicada
                        checkbox.checked = true;
                        this.classList.add('active'); // Adiciona a classe 'active' somente ao clicado
                    });
                });
            });



            const serviceCheckboxes = document.querySelectorAll('.serviceCheckbox');
            const profissionalLabels = document.querySelectorAll('.profissionalLabels');

            // Função para obter os serviços selecionados
            function getSelectedServices() {
                const selectedServices = [];
                serviceCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        selectedServices.push(checkbox.value);  // Armazena o ID dos serviços selecionados
                    }
                });
                return selectedServices;
            }

            // Função para filtrar profissionais com base nos serviços selecionados
            function filterProfessionals() {
                const selectedServices = getSelectedServices();  // Obtém os serviços selecionados

                profissionalLabels.forEach(label => {
                    const dataServices = label.getAttribute('data-services');
                    if (!dataServices) {
                        // Se o atributo data-services não existe, ignore este profissional
                        label.style.display = 'none';
                        return;
                    }

                    // Converte os IDs dos serviços do profissional em um array
                    const profissionalServices = dataServices.split(',').map(id => id.trim());  

                    // Verifica se o profissional oferece algum dos serviços selecionados
                    const isVisible = selectedServices.length === 0 || profissionalServices.some(service => selectedServices.includes(service));

                    if (isVisible) {
                        label.style.display = 'block';  // Exibe o profissional
                    } else {
                        label.style.display = 'none';   // Esconde o profissional
                    }
                });
            }

            // Adiciona evento para filtrar os profissionais sempre que um serviço for alterado
            serviceCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', filterProfessionals);  // Filtro ativado quando um serviço é marcado/desmarcado
            });

            // Inicializa a filtragem quando a página carrega
            filterProfessionals()  // Inicializa a filtragem no carregamento
        });
    </script>
    <!--Script para o poupUp de opções do agendamento-->
    <script>
        
        //abrir pouUp de opções
        const optionButtons = document.querySelectorAll(".buttonOpitionsAgendamentos");

        optionButtons.forEach(button => {
            button.addEventListener("click", () => {
                // Encontra o container correspondente ao botão clicado
                const agendamento = button.closest(".boxAgendamento");
                const popupContainer = agendamento.querySelector(".containerPoupUpOptions");

                if (popupContainer) {
                    
                    popupContainer.style.display = "flex";
                }
            });
        });


        //fechar poupUp de opções
        const closeButtons = document.querySelectorAll(".buttonClosePoupUpDeleteAgendamento");

        closeButtons.forEach(button => {
            button.addEventListener("click", () => {
                // Encontra o container correspondente ao botão clicado
                const agendamento = button.closest(".boxAgendamento");
                const popupContainer = agendamento.querySelector(".containerPoupUpOptions");

                if (popupContainer) {
                    popupContainer.style.display = "none"
                }
            });
        });



        //botão de abrir o confirmDelete
        const deleteButtons = document.querySelectorAll(".openPoupUpDeleteAgendamento");

        deleteButtons.forEach(button => {
            button.addEventListener("click", () => {
                const poupUpOptions= button.closest(".poupUpOptions");
                const cancelForm = poupUpOptions.querySelector(".popUpDeleteAgendamento");

                if (cancelForm) {
                    cancelForm.style.display = "flex";
                }
            });
        });

        //botão para fechar o confirmDelete
        const closeConfirmButtons = document.querySelectorAll("#bttCancelPopUpDeleteAgendamento");

        closeConfirmButtons.forEach(button => {
            button.addEventListener("click", () => {
                const poupUpOptions= button.closest(".poupUpOptions");
                const cancelForm = poupUpOptions.querySelector(".popUpDeleteAgendamento");

                if (cancelForm) {
                    cancelForm.style.display = "none";
                }
            });
        });
    </script>
</body>
</html>