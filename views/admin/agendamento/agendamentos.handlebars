<!--Esta é a página que será carregada ao clicar no botão de estabelecimentos-->
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Karla:ital,wght@0,200..800;1,200..800&family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap');

        :root{
            --var-FontStyled: "Karla", sans-serif;
            --var-FontMain: "Open Sans", sans-serif;
        }
        .selected-label {
            background-color: #209F84;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
        }
        .calendar-container {
            text-align: center;
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 400px;
        }
        .navigation {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .navigation button {
            background: #1F5055;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
        }
        .navigation button:hover {
            background: #0f2b2e;
        }
        #calendar {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }
        .day, .day-header {
            padding: 10px;
            text-align: center;
            font-size: 14px;
        }
        .day-header {
            font-weight: bold;
            background: #1F5055;
            color: white;
            border-radius: 5px;
        }
        .day {
            background: #eaeaea;
            border-radius: 5px;
            cursor: pointer;
        }
        .day.disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .day:hover:not(.disabled) {
            background: #209F84;
            color: #fff;
        }
        .day.selected {
            background: #209F84;
            color: #fff;
        }
        .containerHour{
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        .containerHour div{
            display: block;
            text-align: center;
            font-size: 10pt;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-weight: 400;
            color: black;
        }

        .containerHour label{
            background-color: white;
            color: black;
            box-shadow: 0px 0px 2px 1px rgba(0, 0, 0, 0.063);
            width: 90px;
            text-align: center;
        }

        /*calendáio para ver agendamentos---------------------------*/
        #calendarSelet {
            max-width: 200px;
            text-align: center;
            box-shadow: 0px 0px 4px 1px rgba(0, 0, 0, 0.278);
            border-radius: 5px;
            padding: 20px;
            background-color: white;
        }

        .controlMonthCalendar{
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            background: none;
            border: none;
            cursor: pointer;
        }

        #calendar-header-selet {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 7pt;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-weight: 600;
        }

        #days-of-week-selet {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            font-weight: bold;
            margin: 10px 0px;
            width: 100%;
            font-size: 8pt;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-weight: 500;
            text-align: center;
        }

        #calendar-days-selet {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 4px;
        }

        .daySelet {
            width: 25px;
            height: 25px;
            line-height: 25px;
            text-align: center;
            cursor: pointer;
            border-radius: 5px;
            background-color: #f1f1f1;
            transition: background-color 0.3s;
            font-size: 7pt;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-weight: 600;
        }

        .daySelet:hover {
            background-color: #ddd;
        }

        .daySelet.active {
            background-color: #209F84;
            color: white;
        }


        /*planilha de agendamentos--------------------------------------------------------------------------------------------*/
        .containerSchedule{
            display: flex;
            flex-direction: column;
            align-items: start;
            justify-content: start;
            background-color: white;
            box-shadow: 0px 0px 4px 1px rgba(194, 194, 194);
            margin-top: 10px;
            border-radius: 10px;
            width: calc(100% - 280px);
            height: 95%;
            padding: 0px;
            overflow-x: scroll;
        }
        .schedule-table {
            width: 100%;
            border: 0px;
            border: 1px solid rgba(128, 128, 128, 0);
            margin-bottom: 100px;
            border-top-left-radius: 5px;
            border-bottom-left-radius: 5px;
        }

        .schedule-header {
            background-color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-weight: 600;
            font-size: 12pt;
            padding: 10px;
            font-weight: bold;
        }

        .schedule-header-row{
            background-color: white;
            height:80px;
        }

        .schedule-header-professional{
            border: 1px solid gray;
        }

        .professional-container{
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 10px;
        }

        .professional-photo{
            height: 40px;
            width: 40px;
            object-fit: cover;
            border-radius: 100%;
        }

        .schedule-header-time{
            width: 50px;
            border-bottom: #209F84 1px solid ;;
            min-width: 50px;
            max-width: 50px;
            text-align: center; 
            background-color:#209F84;
            color: white;
            border-top-left-radius: 5px;
        }

        .schedule-row {
            height: 80px;
        }

        .schedule-cell {
            border: 1px solid gray;
            width: max-content;
            height: max-content;
        }

        .schedule-time-cell{
            text-align: center;
            border: #209F84 1px solid ;
            background-color: #209F84;
            color: white;
            font-family: var(--var-FontMain);
            font-size: 10pt;
            font-weight: 600;
        }

        /*seleciona o último box de horário*/
        .schedule-body .schedule-row:last-child .schedule-time-cell:first-child {
            border-bottom-left-radius: 5px;
        }

        .schedule-agenda {
            text-align: center;
            color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: 10pt;
            text-shadow: 0px 0px 2px rgba(0, 0, 0, 0.123);
            background-color: #209F84;
            min-width: 200px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            height: 80px;
        }
        .buttonOpitionsAgendamentos{
            border: none;
            cursor: pointer;
        }
        .buttonOpitionsAgendamentos:hover{
            background-color: #1a7e68;
        }

        .schedule-no-agenda {
            color: black;
            font-family: var(--var-FontStyled);
            font-size: 10pt;
            min-width: 200px;
            height: 80%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        /*responsividade*/
        @media (max-width: 1080px) {
            .containerSchedule{
                width: calc(100% - 40px);
            }
        }
        @media (max-width: 700px) {
            .schedule-agenda {
                font-size: 8pt;
                min-width: 150px;
            }
        }
    </style>
    <link rel="stylesheet" href="/agendamentos.css">
    <title>Agendamentos</title>
</head>
<body>
    <aside class="ContainerMenuLeft">
        <div class="ContainerLogoPanel">
            <img src="/images/logoGlamii.png" alt="glamii software">
        </div>
        {{>menuAgendamentos}}
        <a href="/logout" class="boxButtons" id="LogOut">
            <div class="ContainerIconMenuLeft"><img src="/images/icons8-sair-100.png" alt="Deslogar"></div>
            <p>LogOut</p>
        </a>
    </aside>
    <main class="panel">
        <header class="HeaderPanel">
            <div>
                <button class="doboutButton">
                    <img src="/images/icons8-ajuda-32.png" alt="manual da aplicação">
                </button>
            </div>
        </header>

        <section class="ConteinerInfo">
            <!--Container de todas as informções -->
            <section class="viewPanel" style="position: relative;">
                <button class="closeCalender">
                    <img src="/images/icons8-menos-calendário-32.png" alt="calendário">
                </button>
                <aside class="toolBarAgenda">
                    <div id="calendarSelet">
                        <div id="calendar-header-selet">
                            <button id="prev-month-selet" class="controlMonthCalendar">
                                <img src="/images/icons8-back-24.png" alt="mês anterior">
                            </button>
                            <h2 id="month-name-selet"></h2>
                            <button id="next-month-selet"c class="controlMonthCalendar">
                                <img src="/images/icons8-avançar-24.png" alt="próximo mês">
                            </button>
                        </div>
                        <div id="days-of-week-selet">
                            <span>Dom</span><span>Seg</span><span>Ter</span><span>Qua</span><span>Qui</span><span>Sex</span><span>Sáb</span>
                        </div>
                        <div id="calendar-days-selet">
                        </div>
                    </div>
                    <button class="buttonAddAgendamento" id="openFormAgendamento">
                        <p>
                            Novo Agendamento
                        </p>
                    </button>
               </aside>
               <!--Container Planilha de agendamento -->
               <section class="containerSchedule">
                    {{>schedule}}
               </section>
            </section>
        </section>


        <!--Formulário para fazer um novo agendamento-->
        <section class="poupUpForm" id="containerFormAgendamento">
            <section class="containerForm">
                <header>
                    <p class="titleForm">Novo Agendamento</p>
                    <button type="button" class="buttonClosePoupUp" id="closeFormAgendamento"><img src="/images/icons8-excluir-50.png" alt="fechar formulário"></button>
                </header>
                <form action="" method="post" class="formMain">
                    <section class="partForm" id="clienteManualSection">
                        <h2>cliente</h2>
                        <input type="text" name="nameClient" class="inputName" placeholder="nome">
                        <input type="number" name="phoneClient" class="inputName" placeholder="whatsapp">
                    </section>

                    <section class="partForm">
                        <button class="buttonAgendeWithClientesCad" type="button">Clientes Cadastrados</button>
                        <button class="buttonAgendeWithClientesGen" type="button">Cliente genérico</button>
                    </section>

                    <section class="partForm" id="clienteAutoSection">
                        <section class="selectBox">
                            <div class="selectBoxHeader">Clientes</div>
                            <section class="containerOptions">
                                {{#each clientes}}
                                    <label class="LabelCheckBoxAddOptions">
                                        <input type="checkbox" class="clienteCheckbox" name="nameClient" value="{{clientName}}">
                                        <input type="checkbox" class="clienteCheckbox" name="phoneClient" value="{{clientZap}}">
                                        {{clientName}}
                                        {{clientZap}}
                                    </label>
                                {{else}}
                                    <a href="/servicos">Cadastre Serviços</a>
                                {{/each}}
                            </section>
                        </section>
                    </section>

                    <script>
                        const clienteManualSection = document.querySelector("#clienteManualSection")
                        const buttonAgendeWithClientesCad = document.querySelector(".buttonAgendeWithClientesCad")

                        const clienteAutoSection = document.querySelector("#clienteAutoSection")
                        const buttonAgendeWithClientesGen = document.querySelector(".buttonAgendeWithClientesGen")

                        buttonAgendeWithClientesCad.addEventListener("click", ()=>{
                            clienteManualSection.style.display = "none"
                            clienteManualSection.innerHTML = ""
                            clienteAutoSection.style.display = "flex"

                            buttonAgendeWithClientesCad.style.display = "none"
                            buttonAgendeWithClientesGen.style.display = "block"
                        })

                        buttonAgendeWithClientesGen.addEventListener("click", ()=>{
                            clienteManualSection.style.display = "flex"
                            clienteManualSection.innerHTML = `<h2>cliente</h2><input type="text" name="nameClient" class="inputName" placeholder="nome"><input type="number" name="phoneClient" class="inputName" placeholder="whatsapp">`
                            clienteAutoSection.style.display = "none"

                            buttonAgendeWithClientesCad.style.display = "block"
                            buttonAgendeWithClientesGen.style.display = "none"
                        })
                    </script>

                    <section class="partForm">
                        <section class="selectBox">
                            <div class="selectBoxHeader">Serviços</div>
                            <section class="containerOptions">
                                {{#each services}}
                                    <label class="LabelCheckBoxAddOptions">
                                        <input type="checkbox" class="serviceCheckbox" name="service" value="{{_id}}">
                                        {{name}}
                                    </label>
                                {{else}}
                                    <a href="/servicos">Cadastre Serviços</a>
                                {{/each}}
                            </section>
                        </section>
                    </section>
                    <section class="partForm">
                        <section class="selectBox">
                            <div class="selectBoxHeader">Profissionais</div>
                            <section class="containerOptions">
                                {{#each profissionais}}
                                    <label class="LabelCheckBoxAddOptions profissionalLabels" data-services="{{#each services}}{{_id}},{{/each}}">
                                        <input type="checkbox" name="profissional" value="{{_id}}">
                                        {{name}}
                                    </label>
                                {{else}}
                                    <a href="/servicos">Cadastre Profissionais</a>
                                {{/each}}
                            </section>
                        </section>
                    </section>
                    <section class="calendarForm">
                        <div class="calendar-container">
                            <h1 id="current-month">Mês Atual</h1>
                            <div class="navigation">
                                <button id="prev-month" type="button">&lt; Mês Anterior</button>
                                <button id="next-month" type="button">Próximo Mês &gt;</button>
                            </div>
                            <div id="calendar"></div>
                            <p id="selected-date"></p>
                        </div>
                    </section>
                    <section class="partForm">
                        <div id="data-container">

                        </div>
                        <div id="horarios-container">

                        </div>
                    </section>

                    <section class="partFormButtons">
                        <button type="submit" class="buttonSaveSubmit">confirmar e salvar</button>
                        <button type="submit" class="buttonSaveAgendamentoByWhatsapp">
                            enviar pedido de confirmação 
                            <img src="/images/icons8-whatsapp-48.png" alt="enviar pedido de confirmação pelo whatsapp">
                        </button>
                    </section>

                </form>
                <!--SCRIPT PARA ENVIAR OS DADOS DO FORM EM ROTAS DIFERENTES-->
                <script>
                    const form = document.querySelector(".formMain");
                    const buttonSaveSubmit = document.querySelector(".buttonSaveSubmit");
                    const buttonSaveByWhatsapp = document.querySelector(".buttonSaveAgendamentoByWhatsapp");

                    buttonSaveSubmit.addEventListener("click", () => {
                        form.action = "/addagendamentodirect";
                    });
                    buttonSaveByWhatsapp.addEventListener("click", () => {
                        form.action = "/addagendamentobywhatsapp";
                    });
                </script>
            </section>
        </section>
    </main>
    <!--planilha de agendamentos-->
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // Carrega automaticamente a planilha do dia atual
            const today = new Date();
            const todayFormatted = formatDate(today.getFullYear(), today.getMonth() + 1, today.getDate());

            handleDayClick(todayFormatted);

            const calendarDaysSelet = document.getElementById("calendar-days-selet");
            const monthNameSelet = document.getElementById("month-name-selet");
            const scheduleContainer = document.querySelector("#schedule");

            let currentMonthSelet = new Date().getMonth();
            let currentYearSelet = new Date().getFullYear();

            /**
            * Renderiza o calendário na interface.
            */
            function renderCalendarSelet() {
                const firstDay = new Date(currentYearSelet, currentMonthSelet, 1);
                const lastDay = new Date(currentYearSelet, currentMonthSelet + 1, 0);
                const daysInMonth = lastDay.getDate();
                const firstDayIndex = firstDay.getDay();

                calendarDaysSelet.innerHTML = "";
                monthNameSelet.textContent = firstDay.toLocaleDateString("pt-BR", {
                    month: "long",
                    year: "numeric",
                });

                // Preenche os espaços vazios antes do início do mês
                for (let i = 0; i < firstDayIndex; i++) {
                     const emptySlot = document.createElement("div");
                    emptySlot.classList.add("daySelet");
                    emptySlot.style.visibility = "hidden";
                    calendarDaysSelet.appendChild(emptySlot);
                }

                // Preenche os dias do mês
                for (let i = 1; i <= daysInMonth; i++) {
                    const day = document.createElement("div");
                    day.classList.add("daySelet");
                    day.classList.add("block-selectionHTML")
                    day.textContent = i;

                    // Cria a data no formato `YYYY-MM-DD`
                    const date = formatDate(currentYearSelet, currentMonthSelet + 1, i);
                    day.dataset.date = date;

                    day.addEventListener("click", () => handleDayClick(date, day));

                    calendarDaysSelet.appendChild(day);
                }
            }

            // Carrega automaticamente a planilha do dia atual e destaca o botão
            async function loadTodaySchedule() {
                try {
                    const todayElement = Array.from(calendarDaysSelet.children).find(
                        (child) => child.dataset.date === todayFormatted
                    );

                    if (todayElement) {
                        todayElement.classList.add("active"); // Destaca o botão do dia atual
                    }

                    await handleDayClick(todayFormatted, todayElement); // Carrega os agendamentos do dia
                } catch (err) {
                    console.error("Erro ao carregar agendamentos para o dia atual:", err);
                }
            }

            /**
            * Lida com o clique em um dia do calendário.
            * @param {string} date - Data no formato `YYYY-MM-DD`.
            * @param {HTMLElement} dayElement - Elemento clicado no calendário.
            */
            async function handleDayClick(date, dayElement) {
                try {
                    // Chama a API para pegar os dados de agendamento
                    const response = await fetch(`/agendamentos/${date}`);
                    const data = await response.json();

                    // Cria a tabela de agendamentos
                    createScheduleTable(data);

                    // Adiciona feedback visual ao clicar no dia
                    document.querySelectorAll(".daySelet").forEach((day) =>
                        day.classList.remove("active")
                    );
                    dayElement.classList.add("active");
                } catch (err) {
                    console.error("Erro ao buscar agendamentos por dia:", err);
                }
            }

                /**
                * Cria a tabela de agendamentos.
                * @param {Object} data - Dados retornados pela API.
                */
                function createScheduleTable(data) {
                    // Limpa o conteúdo da tabela anterior
                    scheduleContainer.innerHTML = '';

                    // Cria o elemento de tabela
                    const table = document.createElement('table');
                    table.classList.add('schedule-table'); // Classe para a tabela principal

                    // Cria o cabeçalho da tabela
                    const thead = document.createElement('thead');
                    thead.classList.add('schedule-header'); // Classe para o cabeçalho
                    const headerRow = document.createElement('tr');
                    headerRow.classList.add('schedule-header-row'); // Classe para a linha do cabeçalho
                    const timeHeader = document.createElement('th');
                    timeHeader.classList.add('schedule-header-time'); // Classe para o cabeçalho de horários
                    timeHeader.textContent = 'hrs';
                    headerRow.appendChild(timeHeader);

                    // Cria as colunas dos profissionais
                    data.profissionais.forEach((profissional, index) => {
                        const th = document.createElement('th');
                        th.classList.add('schedule-header-professional');
                        th.classList.add(`professional-${index}`); // Classe específica para cada profissional

                        // Cria um contêiner para alinhar foto e nome
                        const container = document.createElement('div');
                        container.classList.add('professional-container'); // Classe para o contêiner

                        // Adiciona a foto do profissional
                        const img = document.createElement('img');
                        img.src = profissional.photoUrl; // Presume que a URL da foto esteja em 'profissional.photoUrl'
                        img.alt = `${profissional.name} photo`;
                        img.classList.add('professional-photo'); // Classe para estilizar a foto

                        // Adiciona o nome do profissional
                        const name = document.createElement('span');
                        name.textContent = profissional.name;
                        name.classList.add('professional-name'); // Classe para o nome

                        // Adiciona a imagem e o nome ao contêiner
                        container.appendChild(img);
                        container.appendChild(name);

                        // Adiciona o contêiner ao cabeçalho
                        th.appendChild(container);
                        headerRow.appendChild(th);
                    });
                    thead.appendChild(headerRow);
                    table.appendChild(thead);

                    // Cria o corpo da tabela com os horários e os agendamentos
                    const tbody = document.createElement('tbody');
                    tbody.classList.add('schedule-body'); // Classe para o corpo da tabela

                    // Para cada horário
                    data.horarios.forEach((hora, rowIndex) => {
                        const row = document.createElement('tr');
                        row.classList.add('schedule-row'); // Classe para cada linha
                        row.classList.add(`row-${rowIndex}`); // Classe específica para cada linha baseada no índice

                        // Adiciona a célula de horário
                        const timeCell = document.createElement('td');
                        timeCell.classList.add('schedule-time-cell'); // Classe para a célula de horários
                        timeCell.textContent = hora;
                        row.appendChild(timeCell);

                        // Para cada profissional, adiciona o agendamento
                        data.profissionais.forEach((profissional, colIndex) => {
                            const cell = document.createElement('td');
                            cell.classList.add('schedule-cell'); // Classe para cada célula
                            cell.classList.add(`cell-${rowIndex}-${colIndex}`); // Classe específica baseada em linha e coluna

                            // Verifica se há agendamentos para esse horário e profissional
                            const agendamento = data.agendamentosOrganizados[profissional._id] && data.agendamentosOrganizados[profissional._id][hora];

                            if (agendamento && agendamento.length > 0) {
                                agendamento.forEach(agenda => {
                                    const buttonOpitionsAgendamentos = document.createElement('button');
                                    buttonOpitionsAgendamentos.classList.add('schedule-agenda'); // Classe para os agendamentos
                                    buttonOpitionsAgendamentos.classList.add('buttonOpitionsAgendamentos')
                                    buttonOpitionsAgendamentos.innerHTML = `${agenda.service} <br> <br> ${agenda.clientName}`;
                                    cell.appendChild(buttonOpitionsAgendamentos);
                                });
                            } else {
                                const div = document.createElement('div');
                                div.classList.add('schedule-no-agenda'); // Classe para "Sem agendamento"
                                div.textContent = 'Disponível';
                                cell.appendChild(div);
                            }

                            row.appendChild(cell);
                        });

                        tbody.appendChild(row);
                    });

                    table.appendChild(tbody);
                    scheduleContainer.appendChild(table);
                }

                /**
                * Formata uma data no formato `YYYY-MM-DD`.
                * @param {number} year - Ano.
                * @param {number} month - Mês (1-12).
                * @param {number} day - Dia do mês.
                * @returns {string} - Data no formato `YYYY-MM-DD`.
                */
                function formatDate(year, month, day) {
                    return `${year}-${String(month).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
                }

        // Navegação de meses anteriores
        document.getElementById("prev-month-selet").addEventListener("click", () => {
            currentMonthSelet -= 1;
            if (currentMonthSelet < 0) {
                currentMonthSelet = 11;
                currentYearSelet -= 1;
            }
            renderCalendarSelet();
        });

        // Navegação para meses seguintes
        document.getElementById("next-month-selet").addEventListener("click", () => {
            currentMonthSelet += 1;
            if (currentMonthSelet > 11) {
                currentMonthSelet = 0;
                currentYearSelet += 1;
            }
            renderCalendarSelet();
        });

        // Renderiza o calendário inicial
        renderCalendarSelet();
        loadTodaySchedule();
    });
    </script>
    <!--Script para o funcionamento do calendário de adicionar agendamento-->
    <script>
        const calendarElement = document.getElementById("calendar");
        const selectedDateElement = document.getElementById("selected-date");
        const prevMonthButton = document.getElementById("prev-month");
        const nextMonthButton = document.getElementById("next-month");
        const currentMonthElement = document.getElementById("current-month");

        // Variáveis para acompanhar o mês e ano exibidos
        let currentDate = new Date();

        // Nomes dos meses e dias da semana
        const monthNames = [
        "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
        "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
        ];
        const dayNames = ["dom", "seg", "ter", "qua", "qui", "sex", "sab"];

        // Função para criar o cabeçalho com os dias da semana
        const createDayHeaders = () => {
        dayNames.forEach(day => {
            const dayHeader = document.createElement("div");
            dayHeader.classList.add("day-header");
            dayHeader.textContent = day;
            calendarElement.appendChild(dayHeader);
        });
        };

        // Função para criar o calendário
        const createCalendar = () => {
        calendarElement.innerHTML = ""; // Limpar calendário existente

        // Atualizar o título com o mês e ano
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();
        currentMonthElement.textContent = `${monthNames[month]} ${year}`;

        createDayHeaders();

        const firstDayOfMonth = new Date(year, month, 1).getDay(); // Dia da semana do 1º dia do mês
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const today = new Date();

        // Adicionar células vazias para os dias antes do início do mês
        for (let i = 0; i < firstDayOfMonth; i++) {
            const emptyCell = document.createElement("div");
            emptyCell.classList.add("day");
            emptyCell.style.visibility = "hidden";
            calendarElement.appendChild(emptyCell);
        }

        // Adicionar os dias do mês
        for (let day = 1; day <= daysInMonth; day++) {
            const date = new Date(year, month, day);
            const dayElement = document.createElement("div");
            dayElement.classList.add("day");
            dayElement.textContent = day;

            // Desabilitar dias anteriores ao dia atual no mês atual
            if (year === today.getFullYear() && month === today.getMonth() && day < today.getDate()) {
                dayElement.classList.add("disabled");
            } else {
                dayElement.addEventListener("click", () => selectDate(date, dayElement));
            }

            calendarElement.appendChild(dayElement);
        }
        };

        // Função para selecionar a data
        const selectDate = (date, dayElement) => {
        const previouslySelected = document.querySelector(".day.selected");
            if (previouslySelected) {
                previouslySelected.classList.remove("selected");
            }

            dayElement.classList.add("selected");

            const formattedDate = `${date.getDate().toString().padStart(2, "0")}/${(date.getMonth() + 1).toString().padStart(2, "0")}`;
            const dayOfWeek = dayNames[date.getDay()];

            selectedDateElement.textContent = `Data selecionada: ${formattedDate}, ${dayOfWeek}`;

            const dataContainer = document.getElementById('data-container')
            dataContainer.innerHTML = ""
            dataContainer.innerHTML = "<input type='hidden' name='data' value="+formattedDate+">"

            var infoDay = {
                diaMes: formattedDate,
                diaSemana: dayOfWeek
            }

            // Enviar dados para o servidor
            const API_URL = window.location.hostname === "localhost"
                ? "http://localhost:8081" // Substitua pela URL local da API
                : "https://projetoagendamento-67dz.onrender.com";

            fetch(`${API_URL}/agendamentos/verifyDays`, {
                method: 'POST', 
                headers: {
                    'Content-Type': 'application/json' 
                },
                body: JSON.stringify(infoDay) 
            })
                .then(response => {
                    if (!response.ok) {
                        console.log(response.json())
                        throw new Error(`Erro na requisição: ${response.statusText}`);
                    }
                    return response.json(); // Converte a resposta em JSON
                })
                .then(data => {
                    console.log('Resposta do servidor:', data); // Exibe a resposta completa do servidor

                    // Verifica se a resposta contém horários disponíveis
                    if (data.status === 'sucesso' && data.horariosDisponiveis) {
                        renderAvailableTimes(data.horariosDisponiveis); // Passa os horários disponíveis para exibir no front-end
                    } else {
                        renderAvailableTimes(data.horariosDisponiveis)
                    }
                })
                .catch(error => {
                    console.error('Erro ao enviar os dados para o servidor:', error);
                });
        };
        const enableSingleSelection = () => {
            const horariosContainer = document.getElementById('horarios-container');
            
            horariosContainer.addEventListener('change', (event) => {
                if (event.target.type === 'checkbox' && event.target.name === 'horario') {
                    // Desmarcar todos os outros checkboxes e remover a classe verde das labels
                    const checkboxes = horariosContainer.querySelectorAll("input[type='checkbox'][name='horario']");
                    checkboxes.forEach(checkbox => {
                        const label = checkbox.closest('label');
                        if (label) {
                            label.classList.remove('selected-label');
                        }
                        if (checkbox !== event.target) {
                            checkbox.checked = false;
                        }
                    });

                    // Adicionar classe verde à label do checkbox selecionado
                    if (event.target.checked) {
                        const selectedLabel = event.target.closest('label');
                        if (selectedLabel) {
                            selectedLabel.classList.add('selected-label');
                        }
                    }
                }
            });
        };

        // rederizar os horários
        const renderAvailableTimes = (horarios) => {
            const horariosContainer = document.getElementById('horarios-container');
            
            horariosContainer.innerHTML = '';
            if (horarios[0] === "o estabelecimento está fechado nesse dia!"){ //o valor deve ser exatamente a mensagem passada na api
                horariosContainer.innerHTML = "<h3>"+horarios[0]+"</h3>";
            } else if (horarios.length > 0) {
                horariosContainer.innerHTML = `<h3>Horários disponíveis:</h3>`;
                const list = document.createElement('section');
                list.classList.add("HoursBox")
                horarios.forEach(horario => {
                    const listItem = document.createElement('div');
                    listItem.classList.toggle('containerHour')
                    listItem.innerHTML = "<label class='LabelCheckBoxAddOptions'><input type='checkbox' name='horario' value="+horario+">"+horario+"h</label>"
                    list.appendChild(listItem);

                });
                horariosContainer.appendChild(list);


                enableSingleSelection()
            } else {
                horariosContainer.innerHTML = `<p>Não há horários disponíveis para esta data.</p>`;
            }
        };

        // Função para alterar o mês
        const changeMonth = (direction) => {
            currentDate.setMonth(currentDate.getMonth() + direction);
            createCalendar();
        };

        // Adicionar eventos aos botões de navegação
        prevMonthButton.addEventListener("click", () => {
            const today = new Date();
            if (
                currentDate.getFullYear() > today.getFullYear() ||
                (currentDate.getFullYear() === today.getFullYear() && currentDate.getMonth() > today.getMonth())
            ) {
                changeMonth(-1);
            }
        });

        nextMonthButton.addEventListener("click", () => {
            changeMonth(1);
        });

        // Inicializar o calendário
        createCalendar();

    </script>
    <script>

        document.addEventListener('DOMContentLoaded', function () {
            // Abre e fecha o formulário de agendamento
            const openFormAgendamento = document.querySelector("#openFormAgendamento");
            const closeFormAgendamento = document.querySelector("#closeFormAgendamento");
            const containerFormAgendamento = document.querySelector("#containerFormAgendamento");

            openFormAgendamento.addEventListener("click", () => {
                containerFormAgendamento.style.display = "flex";
            });

            closeFormAgendamento.addEventListener("click", () => {
                containerFormAgendamento.style.display = "none";
            });

            // Seleção de checkboxes ao clicar na label
            document.querySelectorAll('.LabelCheckBoxAddOptions').forEach(label => {
                label.addEventListener('click', function () {
                    const checkboxes = this.querySelectorAll('input[type="checkbox"]');
                    const isChecked = [...checkboxes].every(cb => cb.checked);

                    checkboxes.forEach(cb => {
                        cb.checked = !isChecked;
                    });

                    this.classList.toggle('active', !isChecked);
                });
            });

            // Filtragem de profissionais com base nos serviços selecionados
            const serviceCheckboxes = document.querySelectorAll('.serviceCheckbox');
            const profissionalLabels = document.querySelectorAll('.profissionalLabels');

            function getSelectedServices() {
                return [...serviceCheckboxes].filter(cb => cb.checked).map(cb => cb.value);
            }

            function filterProfessionals() {
                const selectedServices = getSelectedServices();

                profissionalLabels.forEach(label => {
                    const dataServices = label.getAttribute('data-services');
                    if (!dataServices) {
                        label.style.display = 'none';
                        return;
                    }

                    const profissionalServices = dataServices.split(',').map(id => id.trim());  
                    label.style.display = selectedServices.length === 0 || profissionalServices.some(service => selectedServices.includes(service)) ? 'block' : 'none';
                });
            }

            serviceCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', filterProfessionals);
            });

            filterProfessionals(); // Inicializa a filtragem ao carregar
        });
    </script>
    <!--Script para o poupUp de opções do agendamento e fechar toolBAR-->
    <script>
        const buttonCalender = document.querySelector(".closeCalender");
        const toolBarAgenda = document.querySelector(".toolBarAgenda");

        // Função que abre a toolbar
        function openToolbar() {
            toolBarAgenda.style.display = "flex";

            buttonCalender.removeEventListener("click", openToolbar);
            buttonCalender.addEventListener("click", closeToolbar);
        }

        // Função que fecha a toolbar
        function closeToolbar() {
            toolBarAgenda.style.display = "none";

            buttonCalender.removeEventListener("click", closeToolbar);
            buttonCalender.addEventListener("click", openToolbar);
        }

        // Função que controla o comportamento de acordo com o tamanho da tela
        function checkWindowSize() {
            if (window.innerWidth > 1080) {
                toolBarAgenda.style.display = "flex"; // sempre visível
                buttonCalender.removeEventListener("click", openToolbar);
                buttonCalender.removeEventListener("click", closeToolbar);
            } else {
                toolBarAgenda.style.display = "none"; // começa fechada
                buttonCalender.removeEventListener("click", closeToolbar);
                buttonCalender.addEventListener("click", openToolbar);
            }
        }

        // Checa no carregamento da página
        checkWindowSize();

        // Checa quando a janela é redimensionada
        window.addEventListener("resize", checkWindowSize)
        
        //abrir pouUp de opções
        const optionButtons = document.querySelectorAll(".buttonOpitionsAgendamentos")

        optionButtons.forEach(button => {
            button.addEventListener("click", () => {
                // Encontra o container correspondente ao botão clicado
                const agendamento = button.closest(".boxAgendamento");
                const popupContainer = agendamento.querySelector(".containerPoupUpOptions")

                if (popupContainer) {
                    
                    popupContainer.style.display = "flex";
                }
            });
        });


        //fechar poupUp de opções
        const closeButtons = document.querySelectorAll(".buttonClosePoupUpDeleteAgendamento");

        closeButtons.forEach(button => {
            button.addEventListener("click", () => {
                // Encontra o container correspondente ao botão clicado
                const agendamento = button.closest(".boxAgendamento");
                const popupContainer = agendamento.querySelector(".containerPoupUpOptions");

                if (popupContainer) {
                    popupContainer.style.display = "none"
                }
            });
        });



        //botão de abrir o confirmDelete
        const deleteButtons = document.querySelectorAll(".openPoupUpDeleteAgendamento");

        deleteButtons.forEach(button => {
            button.addEventListener("click", () => {
                const poupUpOptions= button.closest(".poupUpOptions");
                const cancelForm = poupUpOptions.querySelector(".popUpDeleteAgendamento");

                if (cancelForm) {
                    cancelForm.style.display = "flex";
                }
            });
        });

        //botão para fechar o confirmDelete
        const closeConfirmButtons = document.querySelectorAll("#bttCancelPopUpDeleteAgendamento");

        closeConfirmButtons.forEach(button => {
            button.addEventListener("click", () => {
                const poupUpOptions= button.closest(".poupUpOptions");
                const cancelForm = poupUpOptions.querySelector(".popUpDeleteAgendamento");

                if (cancelForm) {
                    cancelForm.style.display = "none";
                }
            });
        });
    </script>
</body>
</html>